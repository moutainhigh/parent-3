1.ip_hash算法:根据客户端ip,hash取模,得到的结果便是访问服务器的序列号.优点:配置简单,无代码入侵,便于服务器的水平拓展.缺点:服务器重启,session丢失,存在单点负载高的风险,单点问题.
2.轮询/加权轮询算法:平均分配/加权轮询,权重大的轮询两次.
3.随机算法/加权随机:随机分发请求,从概率上而言,访问基数足够大,基本等同于轮询.
4.最小链接数:在多个服务器中,与处理连接数(会话数)最小的服务器进行通信的算法.
5.url散列:同一URL发往同一服务器



二:session一致性
1.session复制:(网络通讯模式的组播形式实现)修改tomcatserver.xml文件,tomcat会自己进行session同步
.优点:不入侵应用,便于服务器水平拓展,能使用各种负载均衡策略,服务器重启或者宕机不会造成session丢失.
缺点:性能低(所有会话请求都会复制到别的服务器,当我们的服务器越来越多的时候,用户会话就会出现内存消耗问题)
       代码考虑:序列化操作,请求包的大小问题.

2.session共享:通过缓存中间件(比如Redis)存储session.优点:能适应各种负载均衡策略;服务器重启或者宕机不会造成session丢失.服务器拓张能力强,使用服务器集群大时使用.
              缺点:对应用有入侵,需要添加相关配置.序列化和反序列化消耗cpu.
